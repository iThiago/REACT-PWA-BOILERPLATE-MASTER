{"version":3,"sources":["serviceWorker.js","util/http-util.js","util/history-util.js","pages/home-page.js","store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","console","log","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","toQueryParams","args","params","Object","keys","forEach","key","value","subkey","push","encodeURIComponent","join","history","createHistory","shove","query","search","withRouter","createStore","action","type","concat","text","ReactDOM","render","className","basename","pathname","exact","path","component","homePage","document","getElementById","process","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","e","checkValidServiceWorker"],"mappings":"0OAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6CN,SAASC,EAAgBC,EAAOC,GAC9BC,QAAQC,IAAI,SACZC,UAAUC,cACPC,SAASN,GACTO,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BZ,QAAQC,IACN,gHAKEF,GAAUA,EAAOc,UACnBd,EAAOc,SAASP,KAMlBN,QAAQC,IAAI,sCAGRF,GAAUA,EAAOe,WACnBf,EAAOe,UAAUR,WAO5BS,OAAM,SAAAC,GACLhB,QAAQgB,MAAM,4CAA6CA,M,0BCxGpDC,EAAgB,SAAAC,GAC3B,IAAMC,EAAS,GAgBf,OAdAC,OAAOC,KAAKH,GAAMI,SAAQ,SAAAC,GACxB,IAAMC,EAAQN,EAAKK,GAEE,qBAAVC,GAAmC,OAAVA,IAEhCA,GAA0B,kBAAVA,EAClBJ,OAAOC,KAAKG,GAAOF,SAAQ,SAAAG,GACzBN,EAAOO,KAAP,UAAeH,EAAf,cAAwBI,mBAAmBT,EAAKK,GAAKE,SAGvDN,EAAOO,KAAP,UAAeH,EAAf,YAAsBI,mBAAmBT,EAAKK,UAI3CJ,EAAOS,KAAK,MCdfC,EAAUC,cACVC,EAAQF,EAAQH,KAEtBG,EAAQH,KAAO,SAAAP,GACb,GAAsB,kBAAXA,EACTY,EAAMZ,OACD,CAAC,IACEa,EAAUb,EAAVa,MACRD,EAAM,eACDZ,EADA,CAEHc,OAAQhB,EAAce,GAAS,SAKtBH,ICPAK,eARF,WAEX,OACE,0C,gBCIUC,aARd,WAAoC,IAArBxB,EAAoB,uDAAZ,GAAIyB,EAAQ,uCACjC,OAAQA,EAAOC,MACb,IAAK,WACH,OAAO1B,EAAM2B,OAAO,CAACF,EAAOG,OAC9B,QACE,OAAO5B,KAGoB,CAAC,cAAlC,I,OCAA6B,IAASC,OACP,yBAAKC,UAAU,OACX,kBAAC,IAAD,CAAeC,SAAUlD,OAAOC,SAASkD,UAAY,IACrD,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,MAGrCC,SAASC,eAAe,SLOxBlD,QAAQC,IAAI,uBAAuBkD,cACnCnD,QAAQC,IAAI,yBAAyBkD,iCAKjB,IAAIC,IAAID,gCAAwB1D,OAAOC,UAC3C2D,SAAW5D,OAAOC,SAAS2D,QAOzC5D,OAAO6D,iBAAiB,QAAQ,WAC9B,IACMxD,EAAK,UADDqD,gCACC,2BACXnD,QAAQC,IAAI,QAAQH,GACpBE,QAAQC,IAAI,cAAcV,GACtBA,GAkEV,SAAiCO,EAAOC,GAEtCwD,MAAMzD,GACHO,MAAK,SAAAmD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3D,UAAUC,cAAc2D,MAAMzD,MAAK,SAAAC,GACjCA,EAAayD,aAAa1D,MAAK,WAC7BZ,OAAOC,SAASsE,YACfjD,OAAM,SAAAkD,GAAC,OAAIjE,QAAQC,IAAIgE,UAG5BjE,QAAQC,IAAI,eAEZJ,EAAgBC,EAAOC,OAG1BgB,OAAM,WACLf,QAAQC,IACN,oEAxFAiE,CAAwBpE,GACxBE,QAAQC,IAAI,YAGZC,UAAUC,cAAc2D,MAAMzD,MAAK,WACjCL,QAAQC,IACN,iHAKJD,QAAQC,IAAI,UAEZJ,EAAgBC,S","file":"static/js/main.60214630.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  console.log(\"process.env.NODE_ENV\",process.env.NODE_ENV)\n  console.log(\"process.env.PUBLIC_URL\",process.env.PUBLIC_URL)\n  // console.log(\"swUrl\",swUrl)\n  if (true) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      var url = process.env.PUBLIC_URL //|| 'http://localhost:3000/'\n      const swUrl = `${url}/customServiceWorker.js`;\n      console.log(\"swUrl\",swUrl)\n      console.log(\"isLocalhost\",isLocalhost)\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n        console.log('qqqqqqqq')\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        console.log('aaaaaa')\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  console.log('xxxxx')\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          }).catch(e => console.log(e));\n        });\n      } else {\n        console.log('asdsadsayyy')\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(e => console.log(e));\n  }\n}\n","export const toQueryParams = args => {\n  const params = [];\n\n  Object.keys(args).forEach(key => {\n    const value = args[key];\n\n    if (typeof value === 'undefined' || value === null) return;\n\n    if (value && typeof value === 'object') {\n      Object.keys(value).forEach(subkey => {\n        params.push(`${key}[]=${encodeURIComponent(args[key][subkey])}`);\n      });\n    } else {\n      params.push(`${key}=${encodeURIComponent(args[key])}`);\n    }\n  });\n\n  return params.join('&');\n};\n","import { createBrowserHistory as createHistory } from 'history'\nimport { toQueryParams } from './http-util';\n\nconst history = createHistory();\nconst shove = history.push;\n\nhistory.push = params => {\n  if (typeof params === 'string') {\n    shove(params);\n  } else {\n    const { query } = params;\n    shove({\n      ...params,\n      search: toQueryParams(query || {})\n    });\n  }\n};\n\nexport default history;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst Home = () => {\n\n  return (\n    <div> teste\n    </div>\n  );\n};\n\nexport default withRouter(Home);\n","import { createStore } from 'redux'\r\n\r\nfunction todos(state = [], action) {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return state.concat([action.text])\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst store = createStore(todos, ['Use Redux'])\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Routes } from './routes';\nimport './index.css';\nimport store from './store';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport homePage from './pages/home-page';\n\n\nReactDOM.render(\n  <div className=\"App\">\n      <BrowserRouter basename={window.location.pathname || ''}>\n      <Route exact path=\"/\" component={homePage} />\n        </BrowserRouter>\n  </div>,\n  document.getElementById('root')\n);\n\n\n// Learn more about service workers in CRA: http://bit.ly/CRA-PWA\nserviceWorker.default();\n"],"sourceRoot":""}